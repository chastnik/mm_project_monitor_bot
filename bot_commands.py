"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
"""
import logging
import re
from typing import Optional, Dict, List
from database import db_manager
from mattermost_client import mattermost_client
from jira_tempo_client import jira_tempo_client
from scheduler import scheduler

logger = logging.getLogger(__name__)

class BotCommandHandler:
    def __init__(self):
        self.commands = {
            'help': self.cmd_help,
            'add_user': self.cmd_add_user,
            'remove_user': self.cmd_remove_user,
            'list_users': self.cmd_list_users,
            'check_now': self.cmd_check_now,
            'history': self.cmd_history,
            'status': self.cmd_status,
        }
    
    def handle_message(self, message_text: str, user_email: str, channel_type: str = 'D') -> Optional[str]:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        channel_type: 'D' –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, 'O' –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        """
        if not message_text.strip():
            return None
        
        # –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        message_text = re.sub(r'@\w+\s*', '', message_text).strip()
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        parts = message_text.split()
        if not parts:
            return None
        
        command = parts[0].lower()
        args = parts[1:] if len(parts) > 1 else []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
        admin_commands = ['add_user', 'remove_user', 'check_now']
        if command in admin_commands and not mattermost_client.is_user_admin(user_email):
            return "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã"
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        if command in self.commands:
            try:
                return self.commands[command](args, user_email)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
                return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
        else:
            return self.cmd_help([], user_email)
    
    def cmd_help(self, args: List[str], user_email: str) -> str:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        is_admin = mattermost_client.is_user_admin(user_email)
        
        help_text = """ü§ñ **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞–Ω–æ–≤**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `help` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ `list_users` - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ `history` - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≤–µ—Ä–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞ 7 –¥–Ω–µ–π)
‚Ä¢ `status` - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π

"""
        
        if is_admin:
            help_text += """**–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**
‚Ä¢ `add_user <email> [–∏–º—è]` - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
‚Ä¢ `remove_user <email>` - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞  
‚Ä¢ `check_now` - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä—É—á–Ω—É—é

"""
        
        help_text += """**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `add_user john.doe@company.com –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤`
‚Ä¢ `remove_user john.doe@company.com`
‚Ä¢ `history 14` - –∏—Å—Ç–æ—Ä–∏—è –∑–∞ 14 –¥–Ω–µ–π

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç—ã."""
        
        return help_text
    
    def cmd_add_user(self, args: List[str], user_email: str) -> str:
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        if not args:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `add_user user@company.com [–ò–º—è –§–∞–º–∏–ª–∏—è]`"
        
        email = args[0].lower().strip()
        name = ' '.join(args[1:]) if len(args) > 1 else None
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è email
        if not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', email):
            return "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Mattermost
        mm_user = mattermost_client.get_user_by_email(email)
        mm_user_id = mm_user['id'] if mm_user else None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Jira
        jira_user = jira_tempo_client.get_user_by_email(email)
        jira_account_id = jira_user['accountId'] if jira_user else None
        
        if not mm_user and not jira_user:
            return f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ Mattermost, –Ω–∏ –≤ Jira"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ —Å–∏—Å—Ç–µ–º –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
        if not name:
            if mm_user:
                name = f"{mm_user.get('first_name', '')} {mm_user.get('last_name', '')}".strip()
            elif jira_user:
                name = jira_user['displayName']
            
            if not name:
                name = email
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        success = db_manager.add_user(email, name, mm_user_id, jira_account_id)
        
        if success:
            warnings = []
            if not mm_user:
                warnings.append("–Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Mattermost")
            if not jira_user:
                warnings.append("–Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Jira")
            
            message = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} ({email}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
            if warnings:
                message += f"\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {', '.join(warnings)}"
            
            return message
        else:
            return f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
    
    def cmd_remove_user(self, args: List[str], user_email: str) -> str:
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not args:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `remove_user user@company.com`"
        
        email = args[0].lower().strip()
        
        success = db_manager.remove_user(email)
        if success:
            return f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
        else:
            return f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
    
    def cmd_list_users(self, args: List[str], user_email: str) -> str:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users = db_manager.get_active_users()
        
        if not users:
            return "üìù –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç"
        
        message_parts = ["üìù **–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"]
        
        for i, (email, name, mm_id, jira_id) in enumerate(users, 1):
            status_icons = []
            if mm_id:
                status_icons.append("üí¨")  # Mattermost
            if jira_id:
                status_icons.append("üìã")  # Jira
            
            status = " ".join(status_icons) if status_icons else "‚ùì"
            display_name = name if name else email
            
            message_parts.append(f"{i}. {display_name} ({email}) {status}")
        
        message_parts.append(f"\n**–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {len(users)}")
        message_parts.append("\nüí¨ - –Ω–∞–π–¥–µ–Ω –≤ Mattermost, üìã - –Ω–∞–π–¥–µ–Ω –≤ Jira")
        
        return "\n".join(message_parts)
    
    def cmd_check_now(self, args: List[str], user_email: str) -> str:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä—É—á–Ω—É—é"""
        return scheduler.run_manual_check()
    
    def cmd_history(self, args: List[str], user_email: str) -> str:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        days = 7  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞ –Ω–µ–¥–µ–ª—é
        
        if args:
            try:
                days = int(args[0])
                if days < 1 or days > 30:
                    return "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 30"
            except ValueError:
                return "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"
        
        history = db_manager.get_check_history(days)
        
        if not history:
            return f"üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
        by_date = {}
        for check_date, email, name, has_worklog, hours in history:
            if check_date not in by_date:
                by_date[check_date] = {'with': [], 'without': []}
            
            user_info = f"{name or email}"
            if has_worklog:
                user_info += f" ({hours:.1f}—á)"
                by_date[check_date]['with'].append(user_info)
            else:
                by_date[check_date]['without'].append(user_info)
        
        message_parts = [f"üìä **–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞ {days} –¥–Ω–µ–π:**\n"]
        
        for date in sorted(by_date.keys(), reverse=True):
            data = by_date[date]
            message_parts.append(f"**{date}:**")
            
            if data['with']:
                message_parts.append(f"  ‚úÖ –ó–∞–ø–æ–ª–Ω–∏–ª–∏ ({len(data['with'])}): {', '.join(data['with'])}")
            
            if data['without']:
                message_parts.append(f"  ‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ ({len(data['without'])}): {', '.join(data['without'])}")
            
            message_parts.append("")
        
        return "\n".join(message_parts)
    
    def cmd_status(self, args: List[str], user_email: str) -> str:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        message_parts = ["ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**\n"]
        
        # –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        scheduler_status = "üü¢ –ó–∞–ø—É—â–µ–Ω" if scheduler.running else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        message_parts.append(f"**–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:** {scheduler_status}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        try:
            # –¢–µ—Å—Ç Mattermost
            mm_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω"
            if mattermost_client.driver:
                me = mattermost_client.driver.users.get_user('me')
                mm_status += f" ({me['username']})"
        except:
            mm_status = "üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
        
        message_parts.append(f"**Mattermost:** {mm_status}")
        
        # –¢–µ—Å—Ç Jira
        try:
            jira_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω"
            if jira_tempo_client.jira_client:
                current_user = jira_tempo_client.jira_client.current_user()
                jira_status += f" ({current_user})"
        except:
            jira_status = "üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
        
        message_parts.append(f"**Jira:** {jira_status}")
        
        # –¢–µ—Å—Ç Tempo API
        tempo_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω" if jira_tempo_client.test_tempo_connection() else "üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
        message_parts.append(f"**Tempo API:** {tempo_status}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = db_manager.get_active_users()
        message_parts.append(f"**–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:** {len(users)}")
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        history = db_manager.get_check_history(1)
        if history:
            last_check = history[0][0]  # –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            message_parts.append(f"**–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:** {last_check}")
        else:
            message_parts.append("**–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:** –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å")
        
        return "\n".join(message_parts)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥
command_handler = BotCommandHandler()
