#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤ –≤ Jira —á–µ—Ä–µ–∑ Tempo
"""
import logging
import sys
import signal
import time
from datetime import datetime
from mattermostdriver import Driver
from config import config
from database import db_manager
from mattermost_client import mattermost_client
from jira_tempo_client import jira_tempo_client
from scheduler import scheduler
from bot_commands import command_handler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞
    logging.basicConfig(
        level=getattr(logging, config.LOG_LEVEL.upper()),
        format=log_format,
        handlers=[
            logging.FileHandler(config.LOG_FILE, encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    # –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('urllib3').setLevel(logging.WARNING)
    logging.getLogger('requests').setLevel(logging.WARNING)
    logging.getLogger('mattermostdriver').setLevel(logging.WARNING)

class StandupBot:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.running = False
        self.websocket = None
        
    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞–Ω–æ–≤...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self._validate_config()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db_manager.init_database()
            self.logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self._test_connections()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            scheduler.start()
            self.logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            self._setup_websocket()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            self._send_startup_message()
            
            self.running = True
            self.logger.info("üéâ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            self._run_main_loop()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            sys.exit(1)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        
        self.running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler.stop()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket
        if self.websocket:
            try:
                mattermost_client.driver.disconnect()
            except:
                pass
        
        self.logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _validate_config(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        required_settings = [
            ('MATTERMOST_URL', config.MATTERMOST_URL),
            ('MATTERMOST_TOKEN', config.MATTERMOST_TOKEN),
            ('MATTERMOST_CHANNEL_ID', config.MATTERMOST_CHANNEL_ID),
            ('JIRA_URL', config.JIRA_URL),
            ('JIRA_USERNAME', config.JIRA_USERNAME),
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è Jira
        if config.JIRA_AUTH_METHOD.lower() == 'token':
            required_settings.append(('JIRA_API_TOKEN', config.JIRA_API_TOKEN))
        else:
            required_settings.append(('JIRA_PASSWORD', config.JIRA_PASSWORD))
        
        # Tempo –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ Jira API)
        if config.TEMPO_API_TOKEN:
            required_settings.append(('TEMPO_API_TOKEN', config.TEMPO_API_TOKEN))
        
        missing = []
        for name, value in required_settings:
            if not value:
                missing.append(name)
        
        if missing:
            raise ValueError(f"–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {', '.join(missing)}")
        
        if not config.ADMIN_EMAILS or not any(email.strip() for email in config.ADMIN_EMAILS):
            raise ValueError("–ù–µ –∑–∞–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (ADMIN_EMAILS)")
        
        self.logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
    
    def _test_connections(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º"""
        # –¢–µ—Å—Ç Mattermost
        try:
            me = mattermost_client.driver.users.get_user('me')
            self.logger.info(f"‚úÖ Mattermost: –ø–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ {me['username']}")
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Mattermost: {e}")
        
        # –¢–µ—Å—Ç Jira
        try:
            current_user = jira_tempo_client.jira_client.current_user()
            self.logger.info(f"‚úÖ Jira: –ø–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ {current_user}")
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Jira: {e}")
        
        # –¢–µ—Å—Ç Tempo API
        if not jira_tempo_client.test_tempo_connection():
            raise Exception("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Tempo API")
        
        self.logger.info("‚úÖ Tempo API: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –∫–∞–Ω–∞–ª–∞
        channel_info = mattermost_client.get_channel_info(config.MATTERMOST_CHANNEL_ID)
        if not channel_info:
            raise Exception(f"–ö–∞–Ω–∞–ª {config.MATTERMOST_CHANNEL_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        self.logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {channel_info['display_name']}")
    
    def _setup_websocket(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            mattermost_client.driver.init_websocket(self._websocket_handler)
            self.logger.info("‚úÖ WebSocket –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π")
        except Exception as e:
            self.logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebSocket: {e}")
            self.logger.info("–ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    
    def _websocket_handler(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if message.get('event') == 'posted':
                post_data = message.get('data', {}).get('post')
                if post_data:
                    post = eval(post_data)  # –û—Å—Ç–æ—Ä–æ–∂–Ω–æ! –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å json.loads
                    
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
                    if post.get('user_id') == mattermost_client.bot_user_id:
                        return
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    user_id = post.get('user_id')
                    user = mattermost_client.driver.users.get_user(user_id)
                    user_email = user.get('email', '')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                    channel_id = post.get('channel_id')
                    channel = mattermost_client.driver.channels.get_channel(channel_id)
                    channel_type = channel.get('type', 'O')
                    
                    message_text = post.get('message', '')
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞
                    if channel_type == 'D' or f'@{mattermost_client.driver.users.get_user("me")["username"]}' in message_text:
                        response = command_handler.handle_message(message_text, user_email, channel_type)
                        
                        if response:
                            if channel_type == 'D':
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                                mattermost_client.send_direct_message(user_id, response)
                            else:
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∫–∞–Ω–∞–ª
                                mattermost_client.send_channel_message(channel_id, response)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def _send_startup_message(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        try:
            startup_message = f"""ü§ñ **–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞–Ω–æ–≤ –∑–∞–ø—É—â–µ–Ω!**

üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:** –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {config.CHECK_TIME}
üë• **–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {len(db_manager.get_active_users())}
‚öôÔ∏è **–í–µ—Ä—Å–∏—è:** {datetime.now().strftime('%Y.%m.%d')}

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É `help` –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö."""
            
            mattermost_client.send_channel_message(config.MATTERMOST_CHANNEL_ID, startup_message)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")
    
    def _run_main_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        try:
            while self.running:
                time.sleep(1)
                
        except KeyboardInterrupt:
            self.logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        finally:
            self.stop()

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger = logging.getLogger(__name__)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    bot.stop()
    sys.exit(0)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global bot
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    logger = logging.getLogger(__name__)
    
    logger.info("=" * 50)
    logger.info("ü§ñ Standup Bot –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞–Ω–æ–≤ –≤ Jira")
    logger.info("=" * 50)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = StandupBot()
    bot.start()

if __name__ == '__main__':
    main()
