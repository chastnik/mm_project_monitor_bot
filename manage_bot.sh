#!/bin/bash

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Project Monitor Bot
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./manage_bot.sh [start|stop|restart|status|logs|install]
# 
# –í–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é:
# - –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Jira –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
COMMAND="${1:-help}"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_header() {
    echo -e "${BLUE}ü§ñ Project Monitor Bot - $1${NC}"
    echo "========================================"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø–æ–º–æ—â–∏
show_help() {
    print_header "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
    echo ""
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  start     - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º–µ"
    echo "  dev       - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
    echo "  stop      - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"
    echo "  restart   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
    echo "  status    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"
    echo "  logs      - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –±–æ—Ç–∞"
    echo "  tail      - –°–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo "  install   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
    echo "  test      - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
    echo "  backup    - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    echo "  cleanup   - –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"
    echo "  help      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 start          # –ó–∞–ø—É—Å–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ"
    echo "  $0 dev            # –ó–∞–ø—É—Å–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
    echo "  $0 logs -20       # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤"
    echo "  $0 restart        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"
    echo ""
    print_warning "–í–ê–ñ–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    echo "‚Ä¢ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ Jira –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è –≤ .env"
    echo "‚Ä¢ –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –±–æ—Ç–∞:"
    echo "  - –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É: setup_jira <username> <password>"
    echo "  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: test_jira"
    echo "‚Ä¢ –ü–∞—Ä–æ–ª–∏ —à–∏—Ñ—Ä—É—é—Ç—Å—è –∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
start_bot() {
    local mode="${1:-prod}"
    print_header "–ó–∞–ø—É—Å–∫ ($mode)"
    
    if [ -x "$SCRIPT_DIR/start_bot.sh" ]; then
        "$SCRIPT_DIR/start_bot.sh" "$mode"
    else
        print_error "–§–∞–π–ª start_bot.sh –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
stop_bot() {
    local force_flag="$1"
    print_header "–û—Å—Ç–∞–Ω–æ–≤–∫–∞"
    
    if [ -x "$SCRIPT_DIR/stop_bot.sh" ]; then
        "$SCRIPT_DIR/stop_bot.sh" $force_flag
    else
        print_error "–§–∞–π–ª stop_bot.sh –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
restart_bot() {
    print_header "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"
    
    print_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞..."
    stop_bot
    
    sleep 2
    
    print_info "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
    start_bot "prod"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞
show_status() {
    if [ -x "$SCRIPT_DIR/stop_bot.sh" ]; then
        "$SCRIPT_DIR/stop_bot.sh" status
    else
        print_error "–§–∞–π–ª stop_bot.sh –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ª–æ–≥–æ–≤
show_logs() {
    local lines="${1:-50}"
    print_header "–õ–æ–≥–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ $lines —Å—Ç—Ä–æ–∫)"
    
    local log_file="$SCRIPT_DIR/standup_bot.log"
    
    if [ -f "$log_file" ]; then
        tail -n "$lines" "$log_file"
    else
        print_warning "–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: $log_file"
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ –ª–æ–≥ —Ñ–∞–π–ª—ã
        local other_logs=$(find "$SCRIPT_DIR" -name "*.log" -type f 2>/dev/null)
        if [ -n "$other_logs" ]; then
            print_info "–ù–∞–π–¥–µ–Ω—ã –¥—Ä—É–≥–∏–µ –ª–æ–≥ —Ñ–∞–π–ª—ã:"
            echo "$other_logs"
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–ª–µ–∂–µ–Ω–∏—è –∑–∞ –ª–æ–≥–∞–º–∏
tail_logs() {
    print_header "–°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –ª–æ–≥–∞–º–∏"
    
    local log_file="$SCRIPT_DIR/standup_bot.log"
    
    if [ -f "$log_file" ]; then
        print_info "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞"
        echo ""
        tail -f "$log_file"
    else
        print_error "–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: $log_file"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_deps() {
    print_header "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ requirements.txt
    if [ ! -f "$SCRIPT_DIR/requirements.txt" ]; then
        print_error "–§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if [ ! -d "$SCRIPT_DIR/venv" ]; then
        print_info "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
        python3 -m venv "$SCRIPT_DIR/venv"
        print_success "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ"
    fi
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    cd "$SCRIPT_DIR"
    source venv/bin/activate
    
    print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip..."
    pip install --upgrade pip
    
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    pip install -r requirements.txt
    
    print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
test_connections() {
    print_header "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"
    
    cd "$SCRIPT_DIR"
    
    if [ ! -d "venv" ]; then
        print_error "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: $0 install"
        exit 1
    fi
    
    source venv/bin/activate
    
    if [ -f "test_connections.py" ]; then
        python3 test_connections.py
    else
        print_warning "–§–∞–π–ª test_connections.py –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π..."
        python3 -c "
import sys
modules = ['database', 'mattermost_client', 'jira_client', 'user_jira_client', 'project_monitor']
for module in modules:
    try:
        __import__(module)
        print(f'‚úÖ {module}')
    except Exception as e:
        print(f'‚ùå {module}: {e}')
"
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
backup_database() {
    print_header "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"
    
    local db_files=$(find "$SCRIPT_DIR" -name "*.db" -type f)
    
    if [ -z "$db_files" ]; then
        print_warning "–§–∞–π–ª—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return
    fi
    
    local backup_dir="$SCRIPT_DIR/backups"
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    
    mkdir -p "$backup_dir"
    
    echo "$db_files" | while read db_file; do
        if [ -f "$db_file" ]; then
            local basename=$(basename "$db_file")
            local backup_file="$backup_dir/${basename%.db}_${timestamp}.db"
            
            cp "$db_file" "$backup_file"
            print_success "–°–æ–∑–¥–∞–Ω–∞ –∫–æ–ø–∏—è: $backup_file"
        fi
    done
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
    find "$backup_dir" -name "*.db" -mtime +30 -delete 2>/dev/null || true
    
    print_info "–°—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (>30 –¥–Ω–µ–π) —É–¥–∞–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
cleanup() {
    print_header "–û—á–∏—Å—Ç–∫–∞"
    
    local cleaned=0
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    local temp_files="*.tmp *.lock __pycache__ *.pyc .pytest_cache"
    for pattern in $temp_files; do
        if find "$SCRIPT_DIR" -name "$pattern" -exec rm -rf {} + 2>/dev/null; then
            cleaned=$((cleaned + 1))
        fi
    done
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
    if [ -f "$SCRIPT_DIR/standup_bot.log" ]; then
        local log_size=$(stat -f%z "$SCRIPT_DIR/standup_bot.log" 2>/dev/null || stat -c%s "$SCRIPT_DIR/standup_bot.log" 2>/dev/null || echo 0)
        if [ "$log_size" -gt 10485760 ]; then  # 10MB
            tail -1000 "$SCRIPT_DIR/standup_bot.log" > "$SCRIPT_DIR/standup_bot.log.tmp"
            mv "$SCRIPT_DIR/standup_bot.log.tmp" "$SCRIPT_DIR/standup_bot.log"
            print_info "–õ–æ–≥ —Ñ–∞–π–ª –æ–±—Ä–µ–∑–∞–Ω (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å—Ç—Ä–æ–∫)"
            cleaned=$((cleaned + 1))
        fi
    fi
    
    if [ $cleaned -gt 0 ]; then
        print_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    else
        print_info "–ù–µ—á–µ–≥–æ –æ—á–∏—â–∞—Ç—å"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    case "$COMMAND" in
        "start")
            start_bot "prod"
            ;;
        "dev")
            start_bot "dev"
            ;;
        "stop")
            stop_bot
            ;;
        "force-stop")
            stop_bot "--force"
            ;;
        "restart")
            restart_bot
            ;;
        "status")
            show_status
            ;;
        "logs")
            show_logs "${2:-50}"
            ;;
        "tail")
            tail_logs
            ;;
        "install")
            install_deps
            ;;
        "test")
            test_connections
            ;;
        "backup")
            backup_database
            ;;
        "cleanup")
            cleanup
            ;;
        "help"|"--help"|"-h")
            show_help
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $COMMAND"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'print_error "–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"; exit 1' INT TERM

# –ó–∞–ø—É—Å–∫
main "$@"
