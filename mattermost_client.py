"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Mattermost API
"""
import logging
import json
import os
from typing import List, Optional, Dict
from mattermostdriver import Driver
from config import config

logger = logging.getLogger(__name__)

class MattermostClient:
    def __init__(self):
        self.driver = None
        self.bot_user_id = None
        self.bot_username = None
        self.direct_channels = {}  # –ö–µ—à DM –∫–∞–Ω–∞–ª–æ–≤: user_id -> channel_id
        self.user_sessions_file = 'user_sessions.json'
        self.connect()
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Mattermost"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ö–µ–º—É –∏ –ø–æ—Ä—Ç –∏–∑ URL
            from urllib.parse import urlparse
            parsed_url = urlparse(config.MATTERMOST_URL)
            scheme = parsed_url.scheme or 'https'
            port = parsed_url.port or (443 if scheme == 'https' else 80)
            hostname = parsed_url.hostname or parsed_url.netloc
            
            self.driver = Driver({
                'url': hostname,
                'token': config.MATTERMOST_TOKEN,
                'scheme': scheme,
                'port': port,
                'basepath': '/api/v4',
                'verify': config.MATTERMOST_SSL_VERIFY,
                'timeout': 30,
            })
            
            self.driver.login()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            me = self.driver.users.get_user('me')
            self.bot_user_id = me['id']
            self.bot_username = me['username']
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Mattermost –∫–∞–∫ {me['username']}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DM –∫–∞–Ω–∞–ª—ã
            self._init_direct_channels()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Mattermost: {e}")
            raise
    
    def get_user_by_email(self, email: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email"""
        try:
            user = self.driver.users.get_user_by_email(email)
            return user
        except Exception as e:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email {email} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Mattermost: {e}")
            return None
    
    def get_users_by_emails(self, emails: List[str]) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–ø–∏—Å–∫—É email"""
        users = {}
        for email in emails:
            user = self.get_user_by_email(email)
            if user:
                users[email] = user
        return users
    
    def send_channel_message(self, channel_id: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª"""
        try:
            self.driver.posts.create_post({
                'channel_id': channel_id,
                'message': message
            })
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {channel_id}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: {e}")
            return False
    
    def send_direct_message(self, user_id: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º DM –∫–∞–Ω–∞–ª
            channel_id = self._get_or_create_dm_channel(user_id)
            if not channel_id:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å DM –∫–∞–Ω–∞–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.driver.posts.create_post({
                'channel_id': channel_id,
                'message': message
            })
            logger.info(f"–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
    
    def send_direct_message_by_email(self, email: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ email"""
        user = self.get_user_by_email(email)
        if user:
            return self.send_direct_message(user['id'], message)
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email {email}")
            return False
    
    def get_channel_info(self, channel_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            channel = self.driver.channels.get_channel(channel_id)
            return channel
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}")
            return None
    
    def is_user_admin(self, user_email: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_email.lower().strip() in [email.lower().strip() for email in config.ADMIN_EMAILS if email.strip()]
    
    def format_user_list_message(self, users_with_worklog: List[str], users_without_worklog: List[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        message_parts = []
        
        message_parts.append("üìä **–û—Ç—á–µ—Ç –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤ –≤ Jira**")
        message_parts.append(f"–î–∞—Ç–∞: {self._get_current_date()}")
        message_parts.append("")
        
        if users_with_worklog:
            message_parts.append("‚úÖ **–ó–∞–ø–æ–ª–Ω–∏–ª–∏ –ø–ª–∞–Ω—ã:**")
            for user in users_with_worklog:
                message_parts.append(f"‚Ä¢ {user}")
            message_parts.append("")
        
        if users_without_worklog:
            message_parts.append("‚ùå **–ù–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ø–ª–∞–Ω—ã:**")
            for user in users_without_worklog:
                message_parts.append(f"‚Ä¢ {user}")
            message_parts.append("")
            message_parts.append("–ò–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        
        if not users_with_worklog and not users_without_worklog:
            message_parts.append("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        return "\n".join(message_parts)
    
    def format_reminder_message(self, user_name: str = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        greeting = f"–ü—Ä–∏–≤–µ—Ç, {user_name}!" if user_name else "–ü—Ä–∏–≤–µ—Ç!"
        
        return f"""{greeting}

‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤**

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–∏ –ø–ª–∞–Ω—ã —Ä–∞–±–æ—Ç—ã –≤ Jira (–ø–ª–∞–≥–∏–Ω Tempo) –∑–∞ —Å–µ–≥–æ–¥–Ω—è.

–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∫–æ–º–∞–Ω–¥–µ –ª—É—á—à–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–µ–∫—Ç–æ–≤.

–°–ø–∞—Å–∏–±–æ! üôè"""
    
    def format_plans_reminder_message(self, user_name: str = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–ª–∞–Ω–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        greeting = f"–ü—Ä–∏–≤–µ—Ç, {user_name}!" if user_name else "–ü—Ä–∏–≤–µ—Ç!"
        
        return f"""{greeting}

üìã **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞–±–æ—Ç**

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ Jira.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏ –≤ Jira
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ **Remaining Estimate** –¥–ª—è –∑–∞–¥–∞—á, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å
‚Ä¢ –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∫–æ–º–∞–Ω–¥–µ –≤–∏–¥–µ—Ç—å –≤–∞—à—É –∑–∞–≥—Ä—É–∑–∫—É –∏ –ø–ª–∞–Ω—ã

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é! üìä"""
    
    def format_plans_report_message(self, users_with_plans: List[str], users_without_plans: List[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—á–µ—Ç–æ–º –æ –ø–ª–∞–Ω–∞—Ö"""
        message_parts = []
        
        message_parts.append("üìä **–û—Ç—á–µ—Ç –æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞–±–æ—Ç –≤ Jira**")
        message_parts.append(f"–î–∞—Ç–∞: {self._get_current_date()}")
        message_parts.append("")
        
        if users_with_plans:
            message_parts.append("‚úÖ **–ï—Å—Ç—å –ø–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**")
            for user in users_with_plans:
                message_parts.append(f"‚Ä¢ {user}")
            message_parts.append("")
        
        if users_without_plans:
            message_parts.append("‚ùå **–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:**")
            for user in users_without_plans:
                message_parts.append(f"‚Ä¢ {user}")
            message_parts.append("")
            message_parts.append("–ò–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.")
        
        if not users_with_plans and not users_without_plans:
            message_parts.append("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        message_parts.append("")
        message_parts.append("üí° *–ü–ª–∞–Ω—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ –ø–æ–ª—é Remaining Estimate –≤ –∑–∞–¥–∞—á–∞—Ö Jira*")
        
        return "\n".join(message_parts)
    
    def _get_current_date(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        from datetime import datetime
        return datetime.now().strftime("%d.%m.%Y")
    
    def _init_direct_channels(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö DM –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –±–æ—Ç–∞
            channels = self.driver.channels.get_channels_for_user(self.bot_user_id, team_id='')
            
            dm_count = 0
            for channel in channels:
                if channel['type'] == 'D':  # Direct message channel
                    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
                    channel_members = self.driver.channels.get_channel_members(channel['id'])
                    for member in channel_members:
                        if member['user_id'] != self.bot_user_id:
                            self.direct_channels[member['user_id']] = channel['id']
                            dm_count += 1
                            break
            
            logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {dm_count} DM –∫–∞–Ω–∞–ª–æ–≤")
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DM –∫–∞–Ω–∞–ª–æ–≤: {e}")
    
    def _get_or_create_dm_channel(self, user_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å DM –∫–∞–Ω–∞–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            if user_id in self.direct_channels:
                return self.direct_channels[user_id]
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π DM –∫–∞–Ω–∞–ª
            direct_channel = self.driver.channels.create_direct_message_channel([self.bot_user_id, user_id])
            channel_id = direct_channel['id']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            self.direct_channels[user_id] = channel_id
            
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π DM –∫–∞–Ω–∞–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {channel_id}")
            return channel_id
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DM –∫–∞–Ω–∞–ª–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {e}")
            return None
    
    def get_direct_channel_id(self, user_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å ID DM –∫–∞–Ω–∞–ª–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        return self.direct_channels.get(user_id)
    
    def is_direct_message(self, channel_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞–Ω–∞–ª –ª–∏—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
        return channel_id in self.direct_channels.values()
    
    def load_user_sessions(self) -> dict:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            if os.path.exists(self.user_sessions_file):
                with open(self.user_sessions_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return {}
    
    def save_user_sessions(self, sessions: dict):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            with open(self.user_sessions_file, 'w', encoding='utf-8') as f:
                json.dump(sessions, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    def handle_new_dm_channel(self, event_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ DM –∫–∞–Ω–∞–ª–∞"""
        try:
            channel_id = event_data.get('channel_id')
            if not channel_id:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            channel = self.driver.channels.get_channel(channel_id)
            if channel['type'] == 'D':
                # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
                members = self.driver.channels.get_channel_members(channel_id)
                for member in members:
                    if member['user_id'] != self.bot_user_id:
                        self.direct_channels[member['user_id']] = channel_id
                        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π DM –∫–∞–Ω–∞–ª: {member['user_id']} -> {channel_id}")
                        break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ DM –∫–∞–Ω–∞–ª–∞: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
mattermost_client = MattermostClient()
