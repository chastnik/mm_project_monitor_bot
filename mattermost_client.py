"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Mattermost API –ø–æ –æ–±—Ä–∞–∑—Ü—É mm_bot_summary
"""
import logging
import re
import asyncio
import json
import websockets
import ssl
import time
from typing import Optional, Dict, Any
from urllib.parse import urlparse
from mattermostdriver import Driver
from config import config

logger = logging.getLogger(__name__)

class MattermostClient:
    def __init__(self):
        self.driver = None
        self.bot_user_id = None
        self.bot_username = None
        self._running = False
        self._websocket = None
        self._connect()
    
    def _connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Mattermost"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö SSL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
            self.driver = Driver({
                'url': config.MATTERMOST_URL.replace('https://', '').replace('http://', ''),
                'token': config.MATTERMOST_TOKEN,
                'scheme': 'https' if 'https' in config.MATTERMOST_URL else 'http',
                'port': 443 if 'https' in config.MATTERMOST_URL else 80,
                'basepath': '/api/v4',
                'verify': config.MATTERMOST_SSL_VERIFY,
                'timeout': 30
            })
            
            self.driver.login()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            me = self.driver.users.get_user('me')
            self.bot_user_id = me['id']
            self.bot_username = me['username']
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Mattermost –∫–∞–∫ {me['username']}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Mattermost: {e}")
            raise
    
    def send_channel_message(self, channel_id: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª"""
        try:
            self.driver.posts.create_post({
                'channel_id': channel_id,
                'message': message
            })
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {channel_id}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: {e}")
            return False
    
    def send_direct_message(self, user_id: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ–π –∫–∞–Ω–∞–ª
            direct_channel = self.driver.channels.create_direct_message_channel([self.bot_user_id, user_id])
            channel_id = direct_channel['id']
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.driver.posts.create_post({
                'channel_id': channel_id,
                'message': message
            })
            logger.info(f"–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def send_direct_message_by_email(self, email: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ email"""
        try:
            user = self.driver.users.get_user_by_email(email)
            return self.send_direct_message(user['id'], message)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {email}: {e}")
            return False
    
    def get_channel_info(self, channel_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            return self.driver.channels.get_channel(channel_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}")
            return None
    
    def get_user_by_email(self, email: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email"""
        try:
            return self.driver.users.get_user_by_email(email)
        except Exception as e:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email {email} –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            return None

    def upload_image(self, channel_id: str, file_path: str, message: str = "", root_id: str = None) -> bool:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç —Å —Ñ–∞–π–ª–æ–º"""
        try:
            import os
            filename = file_path.split('/')[-1]
            if not os.path.exists(file_path):
                logger.error(f"–§–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return False
            with open(file_path, 'rb') as f:
                data = f.read()

            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞
            upload_result = None
            try:
                upload_result = self.driver.files.upload_file(
                    channel_id=channel_id,
                    files={'files': (filename, data)}
                )
            except Exception as e1:
                logger.warning(f"upload_file(variant1) –æ—à–∏–±–∫–∞: {e1}")
                try:
                    upload_result = self.driver.files.upload_file(
                        channel_id=channel_id,
                        files={'files': (filename, data, 'image/jpeg')}
                    )
                except Exception as e2:
                    logger.error(f"upload_file(variant2) –æ—à–∏–±–∫–∞: {e2}")
                    return False

            file_ids = []
            if isinstance(upload_result, dict):
                # –ù–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –æ–±—ä–µ–∫—Ç —Å file_infos
                if 'file_infos' in upload_result and upload_result['file_infos']:
                    file_ids = [fi['id'] for fi in upload_result['file_infos']]
                # –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ –º–æ–≥–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å file_id –Ω–∞–ø—Ä—è–º—É—é
                if 'id' in upload_result:
                    file_ids.append(upload_result['id'])
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ upload_file: {type(upload_result)}")

            if not file_ids:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å file_ids –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                return False

            post_data = {
                'channel_id': channel_id,
                'message': message or '',
                'file_ids': file_ids
            }
            if root_id:
                post_data['root_id'] = root_id

            self.driver.posts.create_post(post_data)
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {filename} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {channel_id}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª {channel_id}: {e}")
            return False
    
    def is_user_admin(self, user_email: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        admin_emails = config.ADMIN_EMAILS if config.ADMIN_EMAILS else []
        return user_email.strip() in [email.strip() for email in admin_emails]
    
    def start_listening(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.driver:
            logger.error("‚ùå –î—Ä–∞–π–≤–µ—Ä Mattermost –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        self._running = True
        logger.info("üéß –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π WebSocket...")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        while self._running:
            try:
                asyncio.run(self._connect_websocket())
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
                if self._running:
                    logger.info("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(5)
    
    async def _connect_websocket(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        # –ü–∞—Ä—Å–∏–º URL –¥–ª—è WebSocket
        parsed_url = urlparse(config.MATTERMOST_URL)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ö–µ–º—É WebSocket
        ws_scheme = 'wss' if parsed_url.scheme == 'https' else 'ws'
        ws_port = parsed_url.port or (443 if parsed_url.scheme == 'https' else 80)
        
        ws_url = f"{ws_scheme}://{parsed_url.hostname}:{ws_port}/api/v4/websocket"
        
        logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket: {ws_url}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        ssl_context = None
        if ws_scheme == 'wss':
            ssl_context = ssl.create_default_context()
            # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
            if not config.MATTERMOST_SSL_VERIFY:
                ssl_context.check_hostname = False
                ssl_context.verify_mode = ssl.CERT_NONE
        
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
            async with websockets.connect(
                ws_url,
                ssl=ssl_context,
                ping_interval=30,
                ping_timeout=10,
                close_timeout=10
            ) as websocket:
                self._websocket = websocket
                
                # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                await self._authenticate_websocket()
                
                logger.info("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                
                # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                async for message in websocket:
                    if not self._running:
                        break
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket
                    if isinstance(message, bytes):
                        message_str = message.decode()
                    else:
                        message_str = str(message)
                    await self._handle_websocket_message(message_str)
                    
        except websockets.exceptions.ConnectionClosed:
            logger.warning("‚ö†Ô∏è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")
            raise
    
    async def _authenticate_websocket(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self._websocket is None:
            raise Exception("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
        auth_message = {
            "seq": 1,
            "action": "authentication_challenge",
            "data": {
                "token": config.MATTERMOST_TOKEN
            }
        }
        
        await self._websocket.send(json.dumps(auth_message))
        
        # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        auth_timeout = 10
        start_time = time.time()
        
        while time.time() - start_time < auth_timeout:
            try:
                message = await asyncio.wait_for(self._websocket.recv(), timeout=1.0)
                event = json.loads(message)
                
                if event.get('event') == 'hello':
                    logger.info("‚úÖ WebSocket –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                    return
                    
            except asyncio.TimeoutError:
                continue
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebSocket: {e}")
                raise
        
        raise Exception("–¢–∞–π–º–∞—É—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebSocket")
    
    async def _handle_websocket_message(self, message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç WebSocket"""
        try:
            event = json.loads(message)
            event_type = event.get('event')
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
            if event_type == 'posted':
                await self._handle_post_event(event)
            elif event_type == 'hello':
                logger.debug("üí¨ –ü–æ–ª—É—á–µ–Ω hello –æ—Ç WebSocket")
            else:
                logger.debug(f"üí¨ –°–æ–±—ã—Ç–∏–µ WebSocket: {event_type}")
                
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç WebSocket: {e}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _handle_post_event(self, event: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
            post_data = event.get('data', {}).get('post')
            if not post_data:
                return
            
            # –ü–∞—Ä—Å–∏–º –ø–æ—Å—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π JSON)
            if isinstance(post_data, str):
                post = json.loads(post_data)
            else:
                post = post_data
            
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
            if post.get('user_id') == self.bot_user_id:
                return
            
            message = post.get('message', '').strip()
            channel_id = post.get('channel_id')
            post_id = post.get('id')
            user_id = post.get('user_id')
            root_id = post.get('root_id') or post_id  # ID —Ç—Ä–µ–¥–∞ –∏–ª–∏ —Å–∞–º–æ–≥–æ –ø–æ—Å—Ç–∞
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ª–∏—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            if self._is_direct_message(channel_id):
                await self._handle_direct_message(channel_id, message, user_id)
                return
            
            # –í –∫–∞–Ω–∞–ª–∞—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞
            if self._is_bot_mentioned(message):
                logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ {channel_id}")
                await self._handle_bot_mention_command(channel_id, message, user_id, root_id, post_id)
                return
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è –ø–æ—Å—Ç–∞: {e}")
    
    def _is_direct_message(self, channel_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞–Ω–∞–ª –ª–∏—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            channel_info = self.driver.channels.get_channel(channel_id)
            return channel_info.get('type') == 'D'  # D = Direct message
        except:
            return False
    
    def _is_bot_mentioned(self, message: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –±–æ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        if not self.bot_username:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ @username
        mention_patterns = [
            f'@{self.bot_username}',
            f'@jora',  # –ò–º—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            f'@–ñ–æ—Ä–∞',  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –≤ –∫–∞–Ω–∞–ª–µ
            f'@project-monitor-bot',  # –ü–æ–ª–Ω–æ–µ –∏–º—è
            f'@project_monitor_bot',  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è
            f'@ask',   # –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç
        ]
        
        message_lower = message.lower()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for pattern in mention_patterns:
            if pattern.lower() in message_lower:
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞: '{pattern}' –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: '{message}'")
                return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏—â–µ–º –ª—é–±—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è @username
        import re
        mentions = re.findall(r'@(\w+)', message)
        for mention in mentions:
            if mention.lower() in ['jora', '–∂–æ—Ä–∞', 'ask', self.bot_username.lower()]:
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ regex: '@{mention}' –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: '{message}'")
                return True
        
        return False
    
    def _is_command(self, message: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π"""
        message_lower = message.lower().strip()
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å –∞–ª–∏–∞—Å–∞–º–∏
        command_aliases = {
            'help': ['help', '—Å–ø—Ä–∞–≤–∫–∞', '–ø–æ–º–æ—â—å', '—Ö–µ–ª–ø', '–∫–æ–º–∞–Ω–¥—ã', '—á—Ç–æ —É–º–µ–µ—à—å'],
            'subscribe': ['subscribe', '–ø–æ–¥–ø–∏—Å–∫–∞', '–ø–æ–¥–ø–∏—à–∏', '–ø–æ–¥–ø–∏—à–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç', '–ø—Ä–æ–µ–∫—Ç', '–º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å', '–æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å'],
            'unsubscribe': ['unsubscribe', '–æ—Ç–ø–∏—Å–∫–∞', '–æ—Ç–ø–∏—à–∏', '–æ—Ç–ø–∏—à–∏ –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞', '–Ω–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å', '–Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å'],
            'list_subscriptions': ['list_subscriptions', '–ø–æ–¥–ø–∏—Å–∫–∏', '—Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫', '–º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏', '—á—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å'],
            'run_subscriptions': ['run_subscriptions', '–ø—Ä–æ–≤–µ—Ä—å', '–ø—Ä–æ–≤–µ—Ä—å –ø–æ–¥–ø–∏—Å–∫–∏', '–∑–∞–ø—É—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É', '–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'],
            'list_projects': ['list_projects', '–ø—Ä–æ–µ–∫—Ç—ã', '—Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤', '–≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã', '–¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã', '–ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã', '–∫–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã'],
            'setup_jira': ['setup_jira', '–Ω–∞—Å—Ç—Ä–æ–π jira', '–Ω–∞—Å—Ç—Ä–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', 'jira –Ω–∞—Å—Ç—Ä–æ–π–∫–∞', '–Ω–∞—Å—Ç—Ä–æ–π –¥–∂–∏—Ä–∞', '–Ω–∞—Å—Ç—Ä–æ–π –¥–∂–∏—Ä—É'],
            'test_jira': ['test_jira', '–ø—Ä–æ–≤–µ—Ä—å jira', '—Ç–µ—Å—Ç jira', '–ø—Ä–æ–≤–µ—Ä—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'],
            'change_password': ['change_password', '—Å–º–µ–Ω–∏ –ø–∞—Ä–æ–ª—å', '–∏–∑–º–µ–Ω–∏ –ø–∞—Ä–æ–ª—å', '–Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å'],
            'history': ['history', '–∏—Å—Ç–æ—Ä–∏—è', '–∏—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', '—á—Ç–æ –±—ã–ª–æ'],
            'status': ['status', '—Å—Ç–∞—Ç—É—Å', '–∫–∞–∫ –¥–µ–ª–∞', '—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç'],
            'analytics': ['analytics', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞', '–ø–æ–∫–∞–∂–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É']
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞–ª–∏–∞—Å—ã –∫–æ–º–∞–Ω–¥
        for command, aliases in command_aliases.items():
            if any(alias in message_lower for alias in aliases):
                return True
        
        return False
    
    def _get_main_command(self, message: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –∞–ª–∏–∞—Å–∞"""
        message_lower = message.lower().strip()
        
        command_aliases = {
            'help': ['help', '—Å–ø—Ä–∞–≤–∫–∞', '–ø–æ–º–æ—â—å', '—Ö–µ–ª–ø', '–∫–æ–º–∞–Ω–¥—ã', '—á—Ç–æ —É–º–µ–µ—à—å'],
            'subscribe': ['subscribe', '–ø–æ–¥–ø–∏—Å–∫–∞', '–ø–æ–¥–ø–∏—à–∏', '–ø–æ–¥–ø–∏—à–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç', '–ø—Ä–æ–µ–∫—Ç', '–º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å', '–æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å'],
            'unsubscribe': ['unsubscribe', '–æ—Ç–ø–∏—Å–∫–∞', '–æ—Ç–ø–∏—à–∏', '–æ—Ç–ø–∏—à–∏ –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞', '–Ω–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å', '–Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å'],
            'list_subscriptions': ['list_subscriptions', '–ø–æ–¥–ø–∏—Å–∫–∏', '—Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫', '–º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏', '—á—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å'],
            'run_subscriptions': ['run_subscriptions', '–ø—Ä–æ–≤–µ—Ä—å', '–ø—Ä–æ–≤–µ—Ä—å –ø–æ–¥–ø–∏—Å–∫–∏', '–∑–∞–ø—É—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É', '–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'],
            'list_projects': ['list_projects', '–ø—Ä–æ–µ–∫—Ç—ã', '—Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤', '–≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã', '–¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã', '–ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã', '–∫–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã'],
            'setup_jira': ['setup_jira', '–Ω–∞—Å—Ç—Ä–æ–π jira', '–Ω–∞—Å—Ç—Ä–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', 'jira –Ω–∞—Å—Ç—Ä–æ–π–∫–∞', '–Ω–∞—Å—Ç—Ä–æ–π –¥–∂–∏—Ä–∞', '–Ω–∞—Å—Ç—Ä–æ–π –¥–∂–∏—Ä—É'],
            'test_jira': ['test_jira', '–ø—Ä–æ–≤–µ—Ä—å jira', '—Ç–µ—Å—Ç jira', '–ø—Ä–æ–≤–µ—Ä—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'],
            'change_password': ['change_password', '—Å–º–µ–Ω–∏ –ø–∞—Ä–æ–ª—å', '–∏–∑–º–µ–Ω–∏ –ø–∞—Ä–æ–ª—å', '–Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å'],
            'history': ['history', '–∏—Å—Ç–æ—Ä–∏—è', '–∏—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', '—á—Ç–æ –±—ã–ª–æ'],
            'status': ['status', '—Å—Ç–∞—Ç—É—Å', '–∫–∞–∫ –¥–µ–ª–∞', '—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç'],
            'analytics': ['analytics', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞', '–ø–æ–∫–∞–∂–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É']
        }
        
        for command, aliases in command_aliases.items():
            if any(alias in message_lower for alias in aliases):
                return command
        
        return 'unknown'
    
    async def _handle_direct_message(self, channel_id: str, message: str, user_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = self.driver.users.get_user(user_id)
            username = user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username}: {message}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            if self._is_command(message):
                await self._handle_command(channel_id, message, user_id, username)
            else:
                # –î–ª—è –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
                await self._send_help_with_suggestions(channel_id, message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _handle_bot_mention_command(self, channel_id: str, message: str, user_id: str, root_id: str, post_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = self.driver.users.get_user(user_id)
            username = user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            
            # –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            cleaned_message = self._remove_bot_mention(message)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            await self._handle_command(channel_id, cleaned_message, user_id, username, root_id)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞: {e}")
    
    async def _handle_channel_command(self, channel_id: str, message: str, user_id: str, root_id: str, post_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –∫–∞–Ω–∞–ª–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = self.driver.users.get_user(user_id)
            username = user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            await self._handle_command(channel_id, message, user_id, username, root_id)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –≤ –∫–∞–Ω–∞–ª–µ: {e}")
    
    def _remove_bot_mention(self, message: str) -> str:
        """–£–±–∏—Ä–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.bot_username:
            return message
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
        mention_patterns = [
            f'@{self.bot_username}',
            '@jora',
            '@–ñ–æ—Ä–∞',
            '@project-monitor-bot',
            '@project_monitor_bot'
        ]
        
        cleaned = message
        for pattern in mention_patterns:
            cleaned = cleaned.replace(pattern, '')
        
        return cleaned.strip()
    
    async def _handle_command(self, channel_id: str, message: str, user_id: str, username: str, root_id: str = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
        try:
            from bot_commands import command_handler
            
            # –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.driver.users.get_user(user_id)
            user_email = user.get('email', username)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º email –∏–ª–∏ username –∫–∞–∫ fallback
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞–Ω–∞–ª–∞
            channel_type = 'D' if self._is_direct_message(channel_id) else 'O'
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –∞–ª–∏–∞—Å–∞
            main_command = self._get_main_command(message)
            
            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
            if main_command == 'unknown':
                await self._send_help_with_suggestions(channel_id, message)
                return
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            logger.info(f"üîç –û—Ç–ª–∞–¥–∫–∞: message={message}, type={type(message)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            response = command_handler.handle_message(
                message, user_email, channel_type, channel_id, None, user_id
            )
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –æ—Ç–≤–µ—Ç–µ –∫–æ–º–∞–Ω–¥—ã
            logger.info(f"üîç –û—Ç–≤–µ—Ç –∫–æ–º–∞–Ω–¥—ã: {response}, —Ç–∏–ø: {type(response)}")
            
            if response:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                if root_id:
                    # –û—Ç–≤–µ—Ç –≤ —Ç—Ä–µ–¥
                    self.driver.posts.create_post({
                        'channel_id': channel_id,
                        'message': response,
                        'root_id': root_id
                    })
                else:
                    # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    self.driver.posts.create_post({
                        'channel_id': channel_id,
                        'message': response
                    })
                
                logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
    
    async def _send_help_message(self, channel_id: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: —Ä–∞–∑–ª–∏—á–∞–µ–º –õ–° –∏ –∫–∞–Ω–∞–ª—ã"""
        try:
            is_dm = self._is_direct_message(channel_id)
            if is_dm:
                help_message = f"""
ü§ñ **–ü—Ä–∏–≤–µ—Ç! –Ø Project Monitor Bot**

–Ø –ø–æ–º–æ–≥–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –≤ Jira –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç –∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏.

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è):**
‚Ä¢ `help` / `—Å–ø—Ä–∞–≤–∫–∞` / `–ø–æ–º–æ—â—å` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ `setup_jira username password` / `–Ω–∞—Å—Ç—Ä–æ–π jira username password` / `–Ω–∞—Å—Ç—Ä–æ–π –¥–∂–∏—Ä–∞ username password` / `–Ω–∞—Å—Ç—Ä–æ–π –¥–∂–∏—Ä—É username password` - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Jira
‚Ä¢ `test_jira` / `–ø—Ä–æ–≤–µ—Ä—å jira` / `—Ç–µ—Å—Ç jira` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Jira
‚Ä¢ `list_projects` / `–ø—Ä–æ–µ–∫—Ç—ã` / `—Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤` - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ Jira

**–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:**
1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Jira: `setup_jira your_username your_password`
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: `test_jira`
3. –í –∫–∞–Ω–∞–ª–µ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –ø—Ä–æ–µ–∫—Ç: `@{self.bot_username} subscribe PROJECT_KEY`

**–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –í—Å–µ –ø–∞—Ä–æ–ª–∏ —à–∏—Ñ—Ä—É—é—Ç—Å—è AES-256 + PBKDF2HMAC
"""
            else:
                help_message = f"""
ü§ñ **–ü—Ä–∏–≤–µ—Ç! –Ø Project Monitor Bot**

–Ø –ø–æ–º–æ–≥–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –≤ Jira –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç –∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏.

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–≤ –∫–∞–Ω–∞–ª–∞—Ö —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞):**
‚Ä¢ `@{self.bot_username} help` / `@{self.bot_username} —Å–ø—Ä–∞–≤–∫–∞`
‚Ä¢ `@{self.bot_username} setup_jira username password` / `@{self.bot_username} –Ω–∞—Å—Ç—Ä–æ–π jira username password`
‚Ä¢ `@{self.bot_username} test_jira` / `@{self.bot_username} –ø—Ä–æ–≤–µ—Ä—å jira`
‚Ä¢ `@{self.bot_username} list_projects` / `@{self.bot_username} –ø—Ä–æ–µ–∫—Ç—ã`
‚Ä¢ `@{self.bot_username} subscribe PROJECT_KEY` / `@{self.bot_username} –ø–æ–¥–ø–∏—à–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç PROJECT_KEY`
‚Ä¢ `@{self.bot_username} list_subscriptions` / `@{self.bot_username} –ø–æ–¥–ø–∏—Å–∫–∏`
‚Ä¢ `@{self.bot_username} run_subscriptions` / `@{self.bot_username} –ø—Ä–æ–≤–µ—Ä—å –ø–æ–¥–ø–∏—Å–∫–∏`

**–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:**
1. **–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª** (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω)
2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Jira –≤ –õ–°: `setup_jira your_username your_password`
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: `test_jira`
4. –í –∫–∞–Ω–∞–ª–µ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –ø—Ä–æ–µ–∫—Ç: `@{self.bot_username} subscribe PROJECT_KEY`

**‚ö†Ô∏è –í–∞–∂–Ω–æ:** 
‚Ä¢ –í –∫–∞–Ω–∞–ª–∞—Ö –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞: `@{self.bot_username} –∫–æ–º–∞–Ω–¥–∞`
‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥

**–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –≤ –∫–∞–Ω–∞–ª–µ:**
‚Ä¢ `@{self.bot_username} –ø–æ–¥–ø–∏—à–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç IDB`
‚Ä¢ `@{self.bot_username} –ø—Ä–æ–≤–µ—Ä—å –ø–æ–¥–ø–∏—Å–∫–∏`
‚Ä¢ `@{self.bot_username} –ø–æ–¥–ø–∏—Å–∫–∏`

**–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –í—Å–µ –ø–∞—Ä–æ–ª–∏ —à–∏—Ñ—Ä—É—é—Ç—Å—è AES-256 + PBKDF2HMAC
"""
            
            self.driver.posts.create_post({
                'channel_id': channel_id,
                'message': help_message
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø—Ä–∞–≤–∫–∏: {e}")
    
    async def _send_help_with_suggestions(self, channel_id: str, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
            message_lower = message.lower().strip()
            suggestions = []
            
            # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ DM/–∫–∞–Ω–∞–ª)
            is_dm = self._is_direct_message(channel_id)
            prefix = '' if is_dm else f'@{self.bot_username} '
            if any(word in message_lower for word in ['–ø–æ–¥–ø–∏—Å–∫', '–ø—Ä–æ–µ–∫—Ç', '–º–æ–Ω–∏—Ç–æ—Ä', '–æ—Ç—Å–ª–µ–∂']):
                suggestions.append(f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: `{prefix}–ø–æ–¥–ø–∏—à–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç IDB` –∏–ª–∏ `{prefix}subscribe IDB`")
            elif any(word in message_lower for word in ['jira', '–Ω–∞—Å—Ç—Ä–æ–π', '–ø–æ–¥–∫–ª—é—á', '–¥–∂–∏—Ä–∞', '–¥–∂–∏—Ä—É']):
                suggestions.append(f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: `{prefix}–Ω–∞—Å—Ç—Ä–æ–π jira username password` –∏–ª–∏ `{prefix}setup_jira username password`")
            elif any(word in message_lower for word in ['–ø—Ä–æ–≤–µ—Ä', '—Ç–µ—Å—Ç', '—Å—Ç–∞—Ç—É—Å']):
                suggestions.append(f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: `{prefix}–ø—Ä–æ–≤–µ—Ä—å jira` –∏–ª–∏ `{prefix}test_jira`")
            elif any(word in message_lower for word in ['—Å–ø–∏—Å–æ–∫', '–ø–æ–¥–ø–∏—Å–∫', '—á—Ç–æ']):
                suggestions.append(f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: `{prefix}–ø–æ–¥–ø–∏—Å–∫–∏` –∏–ª–∏ `{prefix}list_subscriptions`")
            elif any(word in message_lower for word in ['–ø—Ä–æ–µ–∫—Ç', '–¥–æ—Å—Ç—É–ø–Ω', '–∫–∞–∫–∏–µ', '–ø–æ–∫–∞–∑–∞—Ç—å']):
                suggestions.append(f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: `{prefix}–ø—Ä–æ–µ–∫—Ç—ã` –∏–ª–∏ `{prefix}list_projects` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
            else:
                suggestions.append(f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: `{prefix}–ø—Ä–æ–µ–∫—Ç—ã` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
                suggestions.append(f"üí° –ò–ª–∏: `{prefix}–ø–æ–¥–ø–∏—à–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç IDB` –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç")
                suggestions.append(f"üí° –ò–ª–∏: `{prefix}–Ω–∞—Å—Ç—Ä–æ–π jira username password` –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Jira")
            
            help_message = f"""
ü§ñ **–ü—Ä–∏–≤–µ—Ç! –Ø Project Monitor Bot**

–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É: `{message}`

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `{prefix}–ø—Ä–æ–µ–∫—Ç—ã` - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ Jira
‚Ä¢ `{prefix}–ø–æ–¥–ø–∏—à–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç IDB` - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–∞
‚Ä¢ `{prefix}–Ω–∞—Å—Ç—Ä–æ–π jira username password` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Jira
‚Ä¢ `{prefix}–ø—Ä–æ–≤–µ—Ä—å jira` - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Jira
‚Ä¢ `{prefix}–ø–æ–¥–ø–∏—Å–∫–∏` - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ `{prefix}–ø—Ä–æ–≤–µ—Ä—å –ø–æ–¥–ø–∏—Å–∫–∏` - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫

**–ü–æ–¥—Å–∫–∞–∑–∫–∏:**
{chr(10).join(suggestions)}

**–î–ª—è –ø–æ–ª–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏:** `@Jora help`
"""
            
            self.driver.posts.create_post({
                'channel_id': channel_id,
                'message': help_message
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø—Ä–∞–≤–∫–∏ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏: {e}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Mattermost –∫–ª–∏–µ–Ω—Ç–∞...")
        self._running = False
        
        if self._websocket:
            try:
                asyncio.create_task(self._websocket.close())
            except:
                pass
        
        logger.info("‚úÖ Mattermost –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
_mattermost_client = None

def get_mattermost_client():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ Mattermost —Å –ª–µ–Ω–∏–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    global _mattermost_client
    if _mattermost_client is None:
        _mattermost_client = MattermostClient()
    return _mattermost_client

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
mattermost_client = get_mattermost_client()