"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Mattermost API
"""
import logging
from typing import List, Optional, Dict
from mattermostdriver import Driver
from config import config

logger = logging.getLogger(__name__)

class MattermostClient:
    def __init__(self):
        self.driver = None
        self.bot_user_id = None
        self.connect()
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Mattermost"""
        try:
            self.driver = Driver({
                'url': config.MATTERMOST_URL,
                'token': config.MATTERMOST_TOKEN,
                'scheme': 'https',
                'port': 443,
                'basepath': '/api/v4',
                'verify': True,
                'timeout': 30,
            })
            
            self.driver.login()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            me = self.driver.users.get_user('me')
            self.bot_user_id = me['id']
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Mattermost –∫–∞–∫ {me['username']}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Mattermost: {e}")
            raise
    
    def get_user_by_email(self, email: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email"""
        try:
            user = self.driver.users.get_user_by_email(email)
            return user
        except Exception as e:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email {email} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Mattermost: {e}")
            return None
    
    def get_users_by_emails(self, emails: List[str]) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–ø–∏—Å–∫—É email"""
        users = {}
        for email in emails:
            user = self.get_user_by_email(email)
            if user:
                users[email] = user
        return users
    
    def send_channel_message(self, channel_id: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª"""
        try:
            self.driver.posts.create_post({
                'channel_id': channel_id,
                'message': message
            })
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {channel_id}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: {e}")
            return False
    
    def send_direct_message(self, user_id: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä—è–º–æ–π –∫–∞–Ω–∞–ª
            direct_channel = self.driver.channels.create_direct_message_channel([self.bot_user_id, user_id])
            channel_id = direct_channel['id']
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.driver.posts.create_post({
                'channel_id': channel_id,
                'message': message
            })
            logger.info(f"–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
    
    def send_direct_message_by_email(self, email: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ email"""
        user = self.get_user_by_email(email)
        if user:
            return self.send_direct_message(user['id'], message)
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email {email}")
            return False
    
    def get_channel_info(self, channel_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            channel = self.driver.channels.get_channel(channel_id)
            return channel
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}")
            return None
    
    def is_user_admin(self, user_email: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_email.lower().strip() in [email.lower().strip() for email in config.ADMIN_EMAILS if email.strip()]
    
    def format_user_list_message(self, users_with_worklog: List[str], users_without_worklog: List[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        message_parts = []
        
        message_parts.append("üìä **–û—Ç—á–µ—Ç –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤ –≤ Jira**")
        message_parts.append(f"–î–∞—Ç–∞: {self._get_current_date()}")
        message_parts.append("")
        
        if users_with_worklog:
            message_parts.append("‚úÖ **–ó–∞–ø–æ–ª–Ω–∏–ª–∏ –ø–ª–∞–Ω—ã:**")
            for user in users_with_worklog:
                message_parts.append(f"‚Ä¢ {user}")
            message_parts.append("")
        
        if users_without_worklog:
            message_parts.append("‚ùå **–ù–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ø–ª–∞–Ω—ã:**")
            for user in users_without_worklog:
                message_parts.append(f"‚Ä¢ {user}")
            message_parts.append("")
            message_parts.append("–ò–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        
        if not users_with_worklog and not users_without_worklog:
            message_parts.append("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        return "\n".join(message_parts)
    
    def format_reminder_message(self, user_name: str = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        greeting = f"–ü—Ä–∏–≤–µ—Ç, {user_name}!" if user_name else "–ü—Ä–∏–≤–µ—Ç!"
        
        return f"""{greeting}

‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤**

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–∏ –ø–ª–∞–Ω—ã —Ä–∞–±–æ—Ç—ã –≤ Jira (–ø–ª–∞–≥–∏–Ω Tempo) –∑–∞ —Å–µ–≥–æ–¥–Ω—è.

–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∫–æ–º–∞–Ω–¥–µ –ª—É—á—à–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–µ–∫—Ç–æ–≤.

–°–ø–∞—Å–∏–±–æ! üôè"""
    
    def _get_current_date(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        from datetime import datetime
        return datetime.now().strftime("%d.%m.%Y")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
mattermost_client = MattermostClient()
