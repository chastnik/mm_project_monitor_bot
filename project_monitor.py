"""
–ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç –∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å—Ä–æ–∫–æ–≤
"""
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Tuple, Optional
from database import db_manager
from mattermost_client import mattermost_client
from user_jira_client import user_jira_client
from config import config

logger = logging.getLogger(__name__)

class ProjectMonitor:
    def __init__(self):
        self.closed_statuses = ['Done', 'Closed', 'Resolved', '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', '–ó–∞–∫—Ä—ã—Ç–æ', '–ì–æ—Ç–æ–≤–æ', '–û—Ç–º–µ–Ω–µ–Ω–æ', '–û—Ç–∫–∞–∑', '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ', '–û—Ç–∫–ª–æ–Ω–µ–Ω', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞', '–û—Ç–∫–ª–æ–Ω–µ–Ω—ã', '–û—Ç–ª–æ–∂–µ–Ω–æ', '–ù–µ –ø—Ä–æ—à–µ–ª –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫', '–í—ã–ø–æ–ª–Ω–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ', '–û—Ç–º–µ–Ω—ë–Ω', '–ü—Ä–æ—à–µ–ª –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫', '–û—Ç–∫–∞–∑ –æ—Ç –æ—Ñ—Ñ–µ—Ä–∞ ']
        
    def monitor_all_projects(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            subscriptions = db_manager.get_active_subscriptions()
            
            if not subscriptions:
                logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ø—Ä–æ–µ–∫—Ç—ã")
                return
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(subscriptions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
            
            for project_key, project_name, channel_id, team_id, subscribed_by in subscriptions:
                try:
                    logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–∞ {project_key}")
                    self.monitor_project(project_key, project_name, channel_id)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–µ–∫—Ç–∞ {project_key}: {e}")
                    continue
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
    
    def monitor_project(self, project_key: str, project_name: str, channel_id: str):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç {project_key}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –µ—ë
            subscriptions = db_manager.get_subscriptions_by_channel(channel_id)
            project_subscription = None
            
            for subscription in subscriptions:
                if subscription[0] == project_key:  # project_key
                    project_subscription = subscription
                    break
            
            if not project_subscription:
                logger.error(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç {project_key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ {channel_id}")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –ø–æ–¥–ø–∏—Å–∫—É
            subscribed_by_email = project_subscription[2]  # subscribed_by_email
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            issues = self.get_project_issues(subscribed_by_email, project_key)
            
            if not issues:
                logger.warning(f"–ù–µ—Ç –∑–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ {project_key} –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
                return
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(issues)} –∑–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ {project_key}")
            
            notifications_sent = 0
            
            for issue in issues:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç
                    if self.check_time_exceeded(issue):
                        self.send_time_exceeded_notification(issue, project_key, channel_id)
                        notifications_sent += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏
                    if self.check_deadline_overdue(issue):
                        self.send_deadline_notification(issue, project_key, channel_id)
                        notifications_sent += 1
                        
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∑–∞–¥–∞—á–∏
                    self.update_issue_in_cache(issue, project_key)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á–∏ {issue.key}: {e}")
                    continue
            
            logger.info(f"–ü—Ä–æ–µ–∫—Ç {project_key}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {notifications_sent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–µ–∫—Ç–∞ {project_key}: {e}")
    
    def monitor_project_for_channel(self, project_key: str, channel_id: str) -> str:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        logger.info(f"–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ {project_key} –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –µ—ë
            subscriptions = db_manager.get_subscriptions_by_channel(channel_id)
            project_subscription = None
            
            for subscription in subscriptions:
                if subscription[0] == project_key:  # project_key –≤ –ø–æ–∑–∏—Ü–∏–∏ 0
                    project_subscription = subscription
                    break
            
            if not project_subscription:
                return f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            # subscription: (project_key, project_name, subscribed_by_email, created_at, active)
            project_name = project_subscription[1]  # project_name
            subscribed_by_email = project_subscription[2]  # subscribed_by_email
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            issues = self.get_project_issues(subscribed_by_email, project_key)
            
            if not issues:
                return f"–ù–µ—Ç –∑–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞"
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(issues)} –∑–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ {project_key}")
            
            problems_found = []
            
            for issue in issues:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç
                    if self.check_time_exceeded(issue):
                        problems_found.append(f"‚è±Ô∏è {issue.key}: –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏
                    if self.check_deadline_overdue(issue):
                        problems_found.append(f"üìÖ {issue.key}: –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Å—Ä–æ–∫")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á–∏ {issue.key}: {e}")
                    problems_found.append(f"‚ùå {issue.key}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")
                    continue
            
            if problems_found:
                result = f"–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(problems_found)}"
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
                for issue in issues:
                    try:
                        if self.check_time_exceeded(issue):
                            self.send_time_exceeded_notification(issue, project_key, channel_id)
                        if self.check_deadline_overdue(issue):
                            self.send_deadline_notification(issue, project_key, channel_id)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {issue.key}: {e}")
            else:
                result = "–ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            logger.info(f"–ü—Ä–æ–µ–∫—Ç {project_key}: {result}")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–µ–∫—Ç–∞ {project_key}: {e}")
            return f"–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}"
    
    def get_project_issues(self, user_email: str, project_key: str) -> List:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            issues = user_jira_client.get_project_issues(user_email, project_key)
            
            if issues is None:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ {project_key} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_email}")
                return []
            
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(issues)} –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_key}")
            return issues
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞ {project_key}: {e}")
            return []
    
    def check_time_exceeded(self, issue) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            original_estimate = getattr(issue.fields, 'timeoriginalestimate', 0) or 0
            time_spent = getattr(issue.fields, 'timespent', 0) or 0
            
            if original_estimate == 0:
                return False  # –ù–µ—Ç –ø–ª–∞–Ω–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏ - –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ (—Ñ–∞–∫—Ç > –ø–ª–∞–Ω)
            if time_spent > original_estimate:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á
                if self.is_issue_closed_recently(issue):
                    return True
                elif not self.is_issue_closed(issue):
                    return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç –¥–ª—è {issue.key}: {e}")
            return False
    
    def check_deadline_overdue(self, issue) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            due_date = getattr(issue.fields, 'duedate', None)
            
            if not due_date:
                return False  # –ù–µ—Ç —Å—Ä–æ–∫–∞ - –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            due_datetime = datetime.strptime(due_date, '%Y-%m-%d')
            today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º: —Å—Ä–æ–∫ <= —Å–µ–≥–æ–¥–Ω—è –ò –∑–∞–¥–∞—á–∞ –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞
            if due_datetime <= today and not self.is_issue_closed(issue):
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–æ–≤ –¥–ª—è {issue.key}: {e}")
            return False
    
    def is_issue_closed(self, issue) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–∫—Ä—ã—Ç–∞ –ª–∏ –∑–∞–¥–∞—á–∞"""
        try:
            status_name = issue.fields.status.name
            return status_name in self.closed_statuses
        except:
            return False
    
    def is_issue_closed_recently(self, issue) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –±—ã–ª–∞ –ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã—Ç–∞ –Ω–µ–¥–∞–≤–Ω–æ (–Ω–µ –ø–æ–∑–¥–Ω–µ–µ –≤—á–µ—Ä–∞)"""
        try:
            if not self.is_issue_closed(issue):
                return False
            
            # –ò—â–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–≥–¥–∞ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞
            if hasattr(issue, 'changelog') and issue.changelog:
                for history in issue.changelog.histories:
                    for item in history.items:
                        if item.field == 'status' and item.toString in self.closed_statuses:
                            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                            changed_date = datetime.strptime(history.created[:10], '%Y-%m-%d')
                            yesterday = datetime.now() - timedelta(days=1)
                            yesterday = yesterday.replace(hour=0, minute=0, second=0, microsecond=0)
                            
                            # –ó–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã—Ç–∞ –Ω–µ —Ä–∞–Ω—å—à–µ –≤—á–µ—Ä–∞
                            return changed_date >= yesterday
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è {issue.key}: {e}")
            return False
    
    def send_time_exceeded_notification(self, issue, project_key: str, channel_id: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏
            original_estimate = (getattr(issue.fields, 'timeoriginalestimate', 0) or 0) / 3600.0
            time_spent = (getattr(issue.fields, 'timespent', 0) or 0) / 3600.0
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º
            assignee_email, assignee_name = self.get_assignee_info(issue)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            channel_message = self.format_time_exceeded_message(
                issue.key, issue.fields.summary, assignee_name, 
                original_estimate, time_spent, True  # –¥–ª—è –∫–∞–Ω–∞–ª–∞
            )
            
            personal_message = self.format_time_exceeded_message(
                issue.key, issue.fields.summary, assignee_name,
                original_estimate, time_spent, False  # –¥–ª—è –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            mattermost_client.send_channel_message(channel_id, channel_message)
            
            if assignee_email:
                mattermost_client.send_direct_message_by_email(assignee_email, personal_message)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            db_manager.save_notification(
                project_key, issue.key, 'time_exceeded',
                assignee_email, assignee_name, channel_id,
                issue.fields.summary, original_estimate, time_spent
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {issue.key}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è {issue.key}: {e}")
    
    def send_deadline_notification(self, issue, project_key: str, channel_id: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–º —Å—Ä–æ–∫–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º
            assignee_email, assignee_name = self.get_assignee_info(issue)
            
            due_date = getattr(issue.fields, 'duedate', None)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            channel_message = self.format_deadline_message(
                issue.key, issue.fields.summary, assignee_name, due_date, True
            )
            
            personal_message = self.format_deadline_message(
                issue.key, issue.fields.summary, assignee_name, due_date, False
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            mattermost_client.send_channel_message(channel_id, channel_message)
            
            if assignee_email:
                mattermost_client.send_direct_message_by_email(assignee_email, personal_message)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            db_manager.save_notification(
                project_key, issue.key, 'deadline_overdue',
                assignee_email, assignee_name, channel_id,
                issue.fields.summary, 0, 0, due_date
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ: {issue.key}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ä–æ–∫–µ –¥–ª—è {issue.key}: {e}")
    
    def get_assignee_info(self, issue) -> Tuple[Optional[str], str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º –∑–∞ –∑–∞–¥–∞—á—É"""
        try:
            if issue.fields.assignee:
                assignee_name = issue.fields.assignee.displayName
                assignee_email = getattr(issue.fields.assignee, 'emailAddress', None)
                return assignee_email, assignee_name
            else:
                return None, "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        except:
            return None, "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
    
    def update_issue_in_cache(self, issue, project_key: str):
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –≤ –∫–µ—à–µ"""
        try:
            assignee_email, assignee_name = self.get_assignee_info(issue)
            
            original_estimate = (getattr(issue.fields, 'timeoriginalestimate', 0) or 0) / 3600.0
            time_spent = (getattr(issue.fields, 'timespent', 0) or 0) / 3600.0
            remaining_estimate = (getattr(issue.fields, 'timeestimate', 0) or 0) / 3600.0
            
            due_date = getattr(issue.fields, 'duedate', None)
            status = issue.fields.status.name
            
            db_manager.update_issue_cache(
                issue.key, project_key, issue.fields.summary,
                assignee_email, assignee_name, status, due_date,
                original_estimate, time_spent, remaining_estimate
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞ –¥–ª—è {issue.key}: {e}")
    
    def format_time_exceeded_message(self, issue_key: str, summary: str, assignee: str,
                                   planned_hours: float, actual_hours: float, for_channel: bool) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏"""
        excess_hours = actual_hours - planned_hours
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É –≤ Jira
        jira_url = f"{config.JIRA_URL}/browse/{issue_key}"
        task_link = f"[{issue_key}]({jira_url})"
        
        if for_channel:
            return f"""üö® **–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç**

üìã **–ó–∞–¥–∞—á–∞:** {task_link} - {summary[:50]}{'...' if len(summary) > 50 else ''}
üë§ **–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:** {assignee}
‚è±Ô∏è **–ü–ª–∞–Ω–æ–≤—ã–µ —á–∞—Å—ã:** {planned_hours:.1f}—á
üìà **–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —á–∞—Å—ã:** {actual_hours:.1f}—á
‚ùó **–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ:** {excess_hours:.1f}—á

–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–æ–µ–∫—Ç–∞!"""
        else:
            return f"""üö® **–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç –ø–æ –≤–∞—à–µ–π –∑–∞–¥–∞—á–µ**

üìã **–ó–∞–¥–∞—á–∞:** {task_link} - {summary}
‚è±Ô∏è **–ü–ª–∞–Ω–æ–≤—ã–µ —á–∞—Å—ã:** {planned_hours:.1f}—á  
üìà **–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —á–∞—Å—ã:** {actual_hours:.1f}—á
‚ùó **–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ:** {excess_hours:.1f}—á

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏."""
    
    def format_deadline_message(self, issue_key: str, summary: str, assignee: str,
                               due_date: str, for_channel: bool) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–º —Å—Ä–æ–∫–µ"""
        try:
            due_datetime = datetime.strptime(due_date, '%Y-%m-%d')
            formatted_date = due_datetime.strftime('%d.%m.%Y')
        except:
            formatted_date = due_date
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É –≤ Jira
        jira_url = f"{config.JIRA_URL}/browse/{issue_key}"
        task_link = f"[{issue_key}]({jira_url})"
        
        if for_channel:
            return f"""‚è∞ **–ü—Ä–æ—Å—Ä–æ—á–µ–Ω —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è**

üìã **–ó–∞–¥–∞—á–∞:** {task_link} - {summary[:50]}{'...' if len(summary) > 50 else ''}
üë§ **–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:** {assignee}
üìÖ **–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {formatted_date}
‚ùó **–°—Ç–∞—Ç—É—Å:** –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ

–ó–∞–¥–∞—á–∞ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è!"""
        else:
            return f"""‚è∞ **–ü—Ä–æ—Å—Ä–æ—á–µ–Ω —Å—Ä–æ–∫ –ø–æ –≤–∞—à–µ–π –∑–∞–¥–∞—á–µ**

üìã **–ó–∞–¥–∞—á–∞:** {task_link} - {summary}
üìÖ **–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—ã–ª:** {formatted_date}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º –ø—Ä–æ–µ–∫—Ç–∞."""

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
project_monitor = ProjectMonitor()
